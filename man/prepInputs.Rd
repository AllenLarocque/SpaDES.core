% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downloadInputs.R
\name{prepInputs}
\alias{prepInputs}
\title{Download and optionally reproject, crop, mask raw data and output module inputs}
\usage{
prepInputs(targetFile, url = NULL, archive = NULL, alsoExtract = NULL,
  dataset = NULL, destinationPath = ".", fun = "raster", pkg = "raster",
  studyArea = NULL, rasterToMatch = NULL, rasterInterpMethod = "bilinear",
  rasterDatatype = "INT2U", writeCropped = TRUE, addTagsByObject = NULL,
  overwrite = FALSE, quickCheck = getOption("reproducible.quick", FALSE),
  cacheTags = "", purge = FALSE, ...)
}
\arguments{
\item{targetFile}{Character string giving the path to the eventual
file (raster, shapefile, csv, etc.) that will be
downloaded, extracted.}

\item{url}{Optional character string indicating the URL to download from. Normally,
if used within a module, this url should be explicitly given as sourceURL for an
\code{expectsInput}. In that case, it will use the module's checksums file to
confirm that the download occurred correctly. If URL is used here, an ad hoc
checksums will be created in the \code{destinationPath}. This will be used in
subsequent calls to \code{prepInputs}, comparing the file on hand with the ad hoc
\code{checksums.txt}.}

\item{archive}{Optional character string giving the path of an archive
containing \code{targetFile}, or a vector giving a set of nested archives
(e.g., \code{c("xxx.tar", "inner.zip")}). If there is/are (an) inner archive(s),
but they are unknown, the function will try all until it finds the
\code{targetFile}}

\item{alsoExtract}{Optional character string naming files other than
\code{targetFile} that must be extracted from the \code{archive}.}

\item{dataset}{Optional character string representing the dataset of interest
for download. Allows for restricting the lookup for the url to a dataset,
thus avoiding filename collision.}

\item{destinationPath}{Character string of where to download to, and do
all writing of files in.}

\item{fun}{Character string indicating the function to use to load #' \code{targetFile}.}

\item{pkg}{Character string indicating the package in which to find \code{fun}.}

\item{studyArea}{Template \code{SpatialPolygons*} object used for masking, after cropping.
If not in same CRS, then it will be \code{spTransform}ed to
CRS of \code{x} before masking.}

\item{rasterToMatch}{Template \code{Raster*} object used for reprojecting and
cropping.}

\item{rasterInterpMethod}{Method used to compute values for the new
\code{RasterLayer}. See \code{\link[raster]{projectRaster}}. Defaults to bilinear.}

\item{rasterDatatype}{Output data type. Passed to \code{\link[raster]{writeRaster}}}

\item{writeCropped}{Logical. Should the output be written to disk?}

\item{addTagsByObject}{Pass any object in there for which there is a
\code{.tagsByClass} function}

\item{overwrite}{Logical. Should downloading and all the other actions occur even if they
pass the checksums or the files are all there.}

\item{quickCheck}{Logical. If \code{TRUE}, then all Caching that occurs will
be based on the much faster but less robust file.info. \code{FALSE},
the default, uses \code{\link[digest]{digest}}}

\item{cacheTags}{Character vector with Tags. These Tags will be added to the
repository along with the artifact.}

\item{purge}{When prepInputs is called from outside a module, it will write a \code{CHECKSUMS.txt}
file. If there is an incorrect \code{CHECKSUMS.txt}, this will purge it.}

\item{...}{Passed to pkg::fun}
}
\description{
This function can be used to prepare module inputs from raw data. It
runs several other functions, conditionally and sequentially:
\code{downloadFromWebDB} or \code{downloadData} if used within a module. If used
outside of a SpaDES module, then it will use \code{file.download} or
\code{googledrive::drive_download} if the \code{url} has \code{https://drive.google.com}.
If the download is a .zip or .tar file (i.e., an archive), then the function will
run \code{extractFromArchive}. Then it will sequentially try to load the extracted file (if
passed as \code{targetFile}). If the default fun and pkg are not left as is,
the function will try to use those. If the file is not a raster file, it will try
using raster::shapefile. NOTE: This function is still experimental: use
with caution.
with caution.
}
\examples{
# This function works within a module, when "sourceURL" is supplied
#   in the metadata in the "expectsInputs(..., sourceURL = ""), but can
# also run outside a module, e.g., with url argument.
\dontrun{
# Put chunks like this in your .inputObjects
if (!suppliedElsewhere("test", sim))
  sim$test <- Cache(prepInputs, "raster.tif", "downloadedArchive.zip",
                    destinationPath = dataPath(sim), studyArea = sim$studyArea,
                    rasterToMatch = sim$otherRasterTemplate, overwrite = TRUE)

# download a zip file from internet, unzip all files, load as shapefile, Cache the call
# First time: don't know all files - prepInputs will guess, if download file is an archive,
#   then extract all files, then if there is a .shp, it will load with raster::shapefile
dPath <- file.path(tempdir(), "ecozones")
shpEcozone <- prepInputs(destinationPath = dPath,
                     url = "http://sis.agr.gc.ca/cansis/nsdb/ecostrat/zone/ecozone_shp.zip")

# Once this is done, can be more precise in operational code:
#  specify targetFile, alsoExtract, and fun, wrap with Cache
ecozoneFilename <- file.path(dPath, "ecozones.shp")
ecozoneFiles <- dir(dPath, pattern = "ecozones.") # not CHECKSUMS.txt or .zip file
shpEcozone <- Cache(prepInputs,
                    url = "http://sis.agr.gc.ca/cansis/nsdb/ecostrat/zone/ecozone_shp.zip",
                    targetFile = asPath(ecozoneFilename),
                    alsoExtract = asPath(ecozoneFiles),
                    fun = "shapefile", destinationPath = dPath)

#' # Add a study area to Crop and Mask to
# Create a "study area"
library(SpaDES.tools)
StudyArea <- randomPolygon(x = sp::SpatialPoints(matrix(c(-110, 60), ncol=2)), 1e8)
#  specify targetFile, alsoExtract, and fun, wrap with Cache
ecozoneFilename <- file.path(dPath, "ecozones.shp")
ecozoneFiles <- dir(dPath, pattern = "ecozones.") # not CHECKSUMS.txt or .zip file
shpEcozoneSm <- Cache(prepInputs,
                         url = "http://sis.agr.gc.ca/cansis/nsdb/ecostrat/zone/ecozone_shp.zip",
                         targetFile = asPath(ecozoneFilename),
                         alsoExtract = asPath(ecozoneFiles),
                         studyArea = StudyArea,
                         fun = "shapefile", destinationPath = dPath)

dev();
Plot(shpEcozone)
Plot(shpEcozoneSm, addTo = "shpEcozone", col = "red")

# Big Raster, with crop and mask to Study Area - no reprojecting (lossy) of raster,
#   but the StudyArea does get reprojected, need to use rasterToMatch
lcc2005Filename <- file.path(dPath, "LCC2005_V1_4a.tif")
url <- file.path("ftp://ftp.ccrs.nrcan.gc.ca/ad/NLCCLandCover",
                 "LandcoverCanada2005_250m/LandCoverOfCanada2005_V1_4.zip")
dPath <- file.path(tempdir(), "LCC")
LCC2005 <- Cache(prepInputs, url = url,
                     #targetFile = lcc2005Filename,
                     #archive = asPath("LandCoverOfCanada2005_V1_4.zip"),
                     destinationPath = asPath(dPath),
                     studyArea = StudyArea)
Plot(LCC2005)

# Specifying more args
LCC2005 <- Cache(prepInputs, url = url,
                     targetFile = lcc2005Filename,
                     archive = asPath("LandCoverOfCanada2005_V1_4.zip"),
                     destinationPath = asPath(dPath),
                     studyArea = StudyArea)
}

}
\author{
Eliot McIntire

Jean Marchal
}
