% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experiment2.R
\name{as.data.table.simLists}
\alias{as.data.table.simLists}
\title{Coerce elements of a simLists object to a data.table}
\usage{
\method{as.data.table}{simLists}(x, byRep = TRUE, vals, ...)
}
\arguments{
\item{byRep}{Should the data.table have a column labelled "rep", indicating replicate
number/label. Currently, only \code{TRUE} is accepted.}

\item{vals}{A character vector or list of object names to extract from each
simList, or a list of quoted expressions to calculate for each \code{simList},
or a mix of character and quoted expressions.}

\item{...}{Currently unused.}
}
\description{
This is particularly useful to build plots using the tidyverse,
e.g., \code{ggplot2}
}
\examples{
\dontrun {
endTime <- 5
# Example of changing parameter values
mySim1 <- simInit(
  times = list(start = 0.0, end = endTime, timeunit = "year"),
  params = list(
    .globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
    # Turn off interactive plotting
    fireSpread = list(.plotInitialTime = NA, spreadprob = c(0.2), nFires = c(10)),
    caribouMovement = list(.plotInitialTime = NA),
    randomLandscapes = list(.plotInitialTime = NA, .useCache = "init")
  ),
  modules = list("randomLandscapes", "fireSpread", "caribouMovement"),
  paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
               outputPath = tmpdir,
               cachePath = tmpCache),
# Save final state of landscape and caribou
  outputs = data.frame(objectName = c("landscape", "caribou"),
                       stringsAsFactors = FALSE)
)

mySim2 <- simInit(
  times = list(start = 0.0, end = endTime, timeunit = "year"),
  params = list(
.globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
    # Turn off interactive plotting
    fireSpread = list(.plotInitialTime = NA, spreadprob = c(0.2), nFires = c(20)),
    caribouMovement = list(.plotInitialTime = NA),
    randomLandscapes = list(.plotInitialTime = NA, .useCache = "init")
  ),
  modules = list("randomLandscapes", "fireSpread", "caribouMovement"),
  paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
               outputPath = tmpdir,
               cachePath = tmpCache),
  # Save final state of landscape and caribou
  outputs = data.frame(objectName = c("landscape", "caribou"),
                       stringsAsFactors = FALSE)
)

# Run experiment
sims <- experiment2(mySim1, mySim2, replicates = c(5,5))

# Simple, single variable output, quoted
df1 <- as.data.table(sims, byRep = TRUE, vals = quote(length(caribou$x1)))

# Use a variable that has every year's worth of results
df1 <- as.data.table(sims, by = c("rep"), vals = c("nPixelsBurned"))

measure.cols <- grep("nPixelsBurned", names(df1), value = TRUE)
df1a <- data.table::melt(df1, measure.vars = measure.cols, variable.name = "year")
df1a[, year := as.numeric(gsub(".*V([[:digit:]])", "\\\\1", df1a$year))]
df1a <- df1a[, list(sd = sd(value), value = mean(value)), by = c("simList", "year")]
p<- ggplot(df1a, aes(x=year, y=value, group=simList, color=simList)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.2,
                position=position_dodge(0.05))
print(p)
}

}
