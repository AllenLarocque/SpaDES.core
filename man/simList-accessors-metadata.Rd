% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simList-accessors.R
\name{inputObjects}
\alias{inputObjects}
\alias{simList-accessors-metadata}
\alias{inputObjects,simList-method}
\alias{inputObjects,missing-method}
\alias{outputObjects}
\alias{outputObjects,simList-method}
\alias{outputObjects,missing-method}
\alias{outputObjectNames}
\alias{outputObjectNames,simList-method}
\alias{reqdPkgs}
\alias{reqdPkgs,simList-method}
\alias{reqdPkgs,missing-method}
\alias{documentation}
\alias{documentation,simList-method}
\alias{citation}
\alias{citation,simList-method}
\alias{citation,character-method}
\alias{sessInfo}
\alias{sessInfo,simList-method}
\alias{moduleObjects}
\alias{findObjects}
\title{Metadata accessors}
\usage{
inputObjects(sim, module, path)

\S4method{inputObjects}{simList}(sim, module, path)

\S4method{inputObjects}{missing}(sim, module, path)

outputObjects(sim, module, path)

\S4method{outputObjects}{simList}(sim, module, path)

\S4method{outputObjects}{missing}(sim, module, path)

outputObjectNames(sim, module)

\S4method{outputObjectNames}{simList}(sim, module)

reqdPkgs(sim, module, modulePath)

\S4method{reqdPkgs}{simList}(sim, module, modulePath)

\S4method{reqdPkgs}{missing}(sim, module, modulePath)

documentation(sim, module)

\S4method{documentation}{simList}(sim, module)

citation(package, lib.loc = NULL, auto = NULL, module = character())

\S4method{citation}{simList}(package, lib.loc = NULL, auto = NULL, module = character())

\S4method{citation}{character}(package, lib.loc = NULL, auto = NULL, module = character())

sessInfo(sim)

\S4method{sessInfo}{simList}(sim)

moduleObjects(sim, module, path)

findObjects(objects, sim, module, path)
}
\arguments{
\item{sim}{A \code{simList} object from which to extract element(s) or
in which to replace element(s).}

\item{module}{Character vector of module name(s)}

\item{path}{The path to the module., i.e., the \code{modulePath}.
Only relevant if \code{sim} not supplied.}

\item{modulePath}{That path where \code{module} can be found. If set already
using \code{setPaths}, it will use that. This will be ignored if \code{sim}
is supplied and is required if \code{sim} not supplied}

\item{package}{For compatibility with \code{\link[utils:citation]{utils::citation()}}. This can be
a \code{simList} or a character string for a package name.}

\item{lib.loc}{a character vector with path names of \R libraries, or
    the directory containing the source for \code{package}, or
    \code{NULL}.  The default value of \code{NULL} corresponds to all
    libraries currently known.  If the default is used, the loaded
    packages are searched before the libraries.}

\item{auto}{a logical indicating whether the default citation
    auto-generated from the package \file{DESCRIPTION} metadata should
    be used or not, or \code{NULL} (default), indicating that a
    \file{CITATION} file is used if it exists, or an object of class
    \code{"\link[utils]{packageDescription}"} with package metadata (see
    below).}

\item{objects}{A character vector of length >= 1 with name(s) of objects to look
for in the metadata. This is used in a \code{grep}, meaning it will do partial
matching (e.g., "studyArea" will find "studyArea" and "studyAreaLarge"). User can
use \code{regexp}.}
}
\value{
\code{moduleObjects} returns a data.table with 4 columns, \code{module}, \code{objectName}, \code{type}, and \code{desc},
pulled directly from the object metadata in the \code{createsOutputs} and \code{expectsInputs}. These
will be determined either from a \code{simList} or from the module source code.

\code{findObjects} returns a data.table similar to \code{moduleObjects}, but with only the
objects provided by \code{objects}.
}
\description{
These accessors extract the metadata for a module (if specified) or all modules
in a \code{simList} if not specified.
}
\examples{
\dontrun{
# set modulePath
setPaths(modulePath = system.file("sampleModules", package = "SpaDES.core"))
# use Require and reqdPkgs
pkgs <- reqdPkgs(module = c("caribouMovement", "randomLandscapes", "fireSpread"))
}
# findObjects
path <- system.file("sampleModules", package = "SpaDES.core")
findObjects(path = path, module = dir(path), objects = "caribou")
}
